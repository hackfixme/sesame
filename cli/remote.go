package cli

import (
	"context"
	"time"

	"github.com/alecthomas/kong"

	actx "go.hackfix.me/sesame/app/context"
	aerrors "go.hackfix.me/sesame/app/errors"
	"go.hackfix.me/sesame/db/models"
	"go.hackfix.me/sesame/web/client"
)

// The Remote command manages remote Sesame nodes.
type Remote struct {
	Add struct {
		Name    string `arg:"" help:"The unique name of the remote node."`
		Address string `arg:"" help:"The remote address in 'host[:port]' format, where 'host' can be a DNS hostname or an IP address."`
		Token   string `arg:"" help:"The invitation token used for authentication, generated by the remote node."`
	} `cmd:"" help:"Add a new remote node."`
	List   struct{} `cmd:"" aliases:"ls" help:"List remote nodes."`
	Remove struct {
		Name string `arg:"" help:"The unique name of the remote."`
	} `cmd:"" aliases:"rm" help:"Delete a remote node."`
	Update struct {
		Name    string `arg:"" help:"The unique name of the remote."`
		Address string `arg:"" help:"The remote address in 'host[:port]' format, where 'host' can be a DNS hostname or an IP address."`
	} `cmd:"" help:"Update a remote node."`
}

// Run the remote command.
func (r *Remote) Run(kctx *kong.Context, appCtx *actx.Context) error {
	dbCtx := appCtx.DB.NewContext()

	switch kctx.Command() {
	case "remote add <name> <address> <token>":
		c := client.New(r.Add.Address, nil, appCtx.Logger)

		clientCtx, cancelClientCtx := context.WithTimeout(appCtx.Ctx, 10*time.Second)
		defer cancelClientCtx()

		response, err := c.RemoteAuth(clientCtx, r.Add.Token)
		if err != nil {
			return err
		}

		remote := models.NewRemote(
			r.Add.Name, r.Add.Address, response.TLSCACert, response.TLSClientCert,
		)
		if err := remote.Save(dbCtx, appCtx.DB, false); err != nil {
			return err
		}
	case "remote list":
		remotes, err := models.Remotes(dbCtx, appCtx.DB, nil)
		if err != nil {
			return aerrors.NewWithCause("failed listing remotes", err)
		}

		data := make([][]string, len(remotes))
		for i, r := range remotes {
			data[i] = []string{r.Name, r.Address}
		}

		if len(data) > 0 {
			header := []string{"Name", "Address"}
			newTable(header, data, appCtx.Stdout).Render()
		}
	case "remote remove <name>":
		// TODO: Implement.
	case "remote update <name> <address>":
		// TODO: Implement.
	}

	return nil
}
